/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => HKCodeBlockPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// src/HKCodeBlockSettings.ts
var DEFAULT_SETTINGS = {
  useTitleGlobal: "default off, but on when specified",
  useLinenosGlobal: "default off, but on when specified",
  defaultLinenosStart: 1,
  showLinenosSplitter: true,
  useHighlightGlobal: "default off, but on when specified",
  highlightColor: "#ff0000",
  useLanguageGlobal: "default on, but off when specified",
  defaultLanguage: "plain text",
  useCopyBtnGlobal: "default on, but off when specified",
  usePromptGlobal: "default on, but off when specified",
  promptingLanguages: ["bash"],
  defaultPrompt: "$",
  useResultGlobal: "enable",
  defaultResultPrompt: "Result",
  debugMode: false
};

// src/HKCodeBlockSettingTab.ts
var import_obsidian = require("obsidian");
var fragWithHTML = (text) => {
  return createFragment((frag) => {
    frag.createDiv().innerHTML = text.split("\n").map((line) => line.trim()).join("<br>");
  });
};
var HKCodeBlockSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Title" });
    new import_obsidian.Setting(containerEl).setName("Use Title").setDesc(fragWithHTML(`- <b>default off, but on when specified</b> : the title will only be shown if the title statement is specified
				- <b>always off</b> : the title will never be shown`)).addDropdown(
      (tc) => tc.addOptions({
        "default off, but on when specified": "default off, but on when specified",
        "always off": "always off"
      }).setValue(this.plugin.settings.useTitleGlobal).onChange(async (value) => {
        this.plugin.settings.useTitleGlobal = value;
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("h2", { text: "Line Numbers" });
    new import_obsidian.Setting(containerEl).setName("Use Line Numbers").setDesc(fragWithHTML(`- <b>always on</b> : line numbers will always be shown
				- <b>default on, but off when specified</b> : line numbers will always be shown, but will not be shown if linenos statement is specified as false
				- <b>default off, but on when specified</b> : line numbers will only be shown if the linenos statement is specified as true
				- <b>always off</b> : line numbers will never be shown`)).addDropdown(
      (tc) => tc.addOptions({
        "always on": "always on",
        "default on, but off when specified": "default on, but off when specified",
        "default off, but on when specified": "default off, but on when specified",
        "always off": "always off"
      }).setValue(this.plugin.settings.useLinenosGlobal).onChange(async (value) => {
        this.plugin.settings.useLinenosGlobal = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Default Line Number Start").setDesc("The default line number start of the code block.").addText(
      (tc) => tc.setValue(this.plugin.settings.defaultLinenosStart.toString()).onChange(async (value) => {
        const num = parseInt(value);
        if (isNaN(num))
          return;
        this.plugin.settings.defaultLinenosStart = num;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Show Line Number Splitter").addToggle(
      (tc) => tc.setValue(this.plugin.settings.showLinenosSplitter).onChange(async (value) => {
        this.plugin.settings.showLinenosSplitter = value;
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("h2", { text: "Line Highlight" });
    new import_obsidian.Setting(containerEl).setName("Use Line Highlight").setDesc(fragWithHTML(`- <b>default off, but on when specified</b> : line highlight will only be shown if the line highlight statement is specified
				- <b>always off</b> : line highlight will never be shown`)).addDropdown(
      (tc) => tc.addOptions({
        "default off, but on when specified": "default off, but on when specified",
        "always off": "always off"
      }).setValue(this.plugin.settings.useHighlightGlobal).onChange(async (value) => {
        this.plugin.settings.useHighlightGlobal = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Line Highlight Color").setDesc("The background color of the highlighted line. Note that the given color will be applied with 0.2 opacity.").addText(
      (tc) => tc.setValue(this.plugin.settings.highlightColor).onChange(async (value) => {
        this.plugin.settings.highlightColor = value;
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("h2", { text: "Language Indicator" });
    new import_obsidian.Setting(containerEl).setName("Use Language Indicator").setDesc(fragWithHTML(`- <b>always on</b> : language indicator will always be shown
				- <b>default on, but off when specified</b> : language indicator will always be shown, but will not be shown if the language indicator statement is specified as false
				- <b>default off, but on when specified</b> : language indicator will only be shown if the language indicator statement is specified as true
				- <b>always off</b> : language indicator will never be shown`)).addDropdown(
      (tc) => tc.addOptions({
        "always on": "always on",
        "default on, but off when specified": "default on, but off when specified",
        "default off, but on when specified": "default off, but on when specified",
        "always off": "always off"
      }).setValue(this.plugin.settings.useLanguageGlobal).onChange(async (value) => {
        this.plugin.settings.useLanguageGlobal = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Default Language").setDesc("The default language name of the code block if the language is not specified.").addText(
      (tc) => tc.setValue(this.plugin.settings.defaultLanguage).onChange(async (value) => {
        this.plugin.settings.defaultLanguage = value;
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("h2", { text: "Copy Button" });
    new import_obsidian.Setting(containerEl).setName("Use Copy Button").setDesc(fragWithHTML(`- <b>always on</b> : copy button will always be shown
				- <b>default on, but off when specified</b> : copy button will always be shown, but will not be shown if the copy button statement is specified as false
				- <b>default off, but on when specified</b> : copy button will only be shown if the copy button statement is specified as true
				- <b>always off</b> : copy button will never be shown`)).addDropdown(
      (tc) => tc.addOptions({
        "always on": "always on",
        "default on, but off when specified": "default on, but off when specified",
        "default off, but on when specified": "default off, but on when specified",
        "always off": "always off"
      }).setValue(this.plugin.settings.useCopyBtnGlobal).onChange(async (value) => {
        this.plugin.settings.useCopyBtnGlobal = value;
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("h2", { text: "Prompt" });
    new import_obsidian.Setting(containerEl).setName("Use Prompt").setDesc(fragWithHTML(`- <b>always on</b> : prompt will always be shown
				- <b>default on, but off when specified</b> : prompt will always be shown, but will not be shown if the prompt statement is specified as false
				- <b>default off, but on when specified</b> : prompt will only be shown if the prompt statement is specified as true
				- <b>always off</b> : prompt will never be shown
				You can also specify the prompt by the statement like \`prompt:"My Prompt"\`. (default: "$")`)).addDropdown(
      (tc) => tc.addOptions({
        "always on": "always on",
        "default on, but off when specified": "default on, but off when specified",
        "default off, but on when specified": "default off, but on when specified",
        "always off": "always off"
      }).setValue(this.plugin.settings.usePromptGlobal).onChange(async (value) => {
        this.plugin.settings.usePromptGlobal = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Prompting Languages").setDesc("The languages that will be prompted by default. You can specify multiple languages by separating them with enters.").addTextArea(
      (tc) => tc.setValue(this.plugin.settings.promptingLanguages.join("\n")).onChange(async (value) => {
        const lines = value.split("\n").filter((line) => line.trim() !== "");
        this.plugin.settings.promptingLanguages = lines;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Default Prompt").setDesc("The default prompt of the bash code block.").addText(
      (tc) => tc.setValue(this.plugin.settings.defaultPrompt).onChange(async (value) => {
        this.plugin.settings.defaultPrompt = value;
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("h2", { text: "Result" });
    new import_obsidian.Setting(containerEl).setName("Use Result").setDesc(fragWithHTML(`- <b>enable</b> : treat the code block starts like \`\`\`\`result\` as the result of the adjacent previous code block
				- <b>disable</b> : treat the code block with \`result\` as its language name as a normal code block`)).addDropdown(
      (tc) => tc.addOptions({
        "enable": "enable",
        "disable": "disable"
      }).setValue(this.plugin.settings.useResultGlobal).onChange(async (value) => {
        this.plugin.settings.useResultGlobal = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Default Result Prompt").setDesc("The default prompt of the result code block.").addText(
      (tc) => tc.setValue(this.plugin.settings.defaultResultPrompt).onChange(async (value) => {
        this.plugin.settings.defaultResultPrompt = value;
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("h2", { text: "Developers" });
    new import_obsidian.Setting(containerEl).setName("Debug Mode").setDesc("Show logs in the console.").addToggle(
      (tc) => tc.setValue(this.plugin.settings.debugMode).onChange(async (value) => {
        this.plugin.settings.debugMode = value;
        await this.plugin.saveSettings();
      })
    );
  }
};

// src/HKCodeBlockProcessor.ts
var import_obsidian2 = require("obsidian");
var REGEX = {
  TITLE: /\stitle:(?:'(.*?)'|"(.*?)")\s/,
  LINENOS_SIMPLE: /\slinenos\s/,
  LINENOS_COMPLICATE: /\slinenos:(true|false|(-{0,1}\d+))\s/,
  HIGHLIGHT: /\shighlight:(?:'(.*?)'|"(.*?)")\s/,
  LANGUAGE_FROM_CLASS: /^language-(\w+)$/,
  LANGUAGE_SIMPLE: /\slanguage\s/,
  LANGUAGE_COMPLICATE: /\slanguage:(true|false|'(.*?)'|"(.*?)")\s/,
  COPYBTN_SIMPLE: /\scopybtn\s/,
  COPYBTN_COMPLICATE: /\scopybtn:(true|false)\s/,
  RESULT: /^```result\s/,
  PROMPT_SIMPLE: /\sprompt\s/,
  PROMPT_COMPLICATE: /\sprompt:(true|false|'(.*?)'|"(.*?)")\s/
};
function getMeta(view, elem_code, section_code, settings) {
  const firstline = view.editor.getLine(section_code.lineStart) + " ";
  let showTitle = void 0;
  let title = "";
  const regexResult_title = REGEX.TITLE.exec(firstline);
  if (regexResult_title) {
    showTitle = true;
    title = regexResult_title[1] || regexResult_title[2];
  }
  let showLinenos = void 0;
  let linenosStart = settings.defaultLinenosStart;
  const linenosNum = section_code.lineEnd - section_code.lineStart - 1;
  const regexResult_linenosSimple = REGEX.LINENOS_SIMPLE.exec(firstline);
  const regexResult_linenosComplicate = REGEX.LINENOS_COMPLICATE.exec(firstline);
  if (regexResult_linenosSimple) {
    showLinenos = true;
  } else if (regexResult_linenosComplicate) {
    if (regexResult_linenosComplicate[1] === "true") {
      showLinenos = true;
    } else if (regexResult_linenosComplicate[1] === "false") {
      showLinenos = false;
    } else {
      showLinenos = true;
      linenosStart = parseInt(regexResult_linenosComplicate[2]) || 1;
    }
  }
  let showHighlight = void 0;
  let highlightLines = [];
  const regexResult_highlight = REGEX.HIGHLIGHT.exec(firstline);
  if (regexResult_highlight) {
    showHighlight = true;
    const highlightLines_str = regexResult_highlight[1] || regexResult_highlight[2];
    highlightLines = highlightLines_str.split(",").map((line) => parseInt(line));
    if (highlightLines.some((line) => isNaN(line))) {
      showHighlight = void 0;
      highlightLines = [];
    } else {
      highlightLines = highlightLines.filter((line) => line >= linenosStart && line < linenosStart + linenosNum);
    }
  }
  let showLanguage = void 0;
  let language = (() => {
    let language2 = settings.defaultLanguage;
    elem_code.classList.forEach((className) => {
      const regexResult_languageFromClass = REGEX.LANGUAGE_FROM_CLASS.exec(className.trim());
      if (regexResult_languageFromClass)
        language2 = regexResult_languageFromClass[1];
    });
    return language2;
  })();
  const regexResult_languageSimple = REGEX.LANGUAGE_SIMPLE.exec(firstline);
  const regexResult_languageComplicate = REGEX.LANGUAGE_COMPLICATE.exec(firstline);
  if (regexResult_languageSimple) {
    showLanguage = true;
  } else if (regexResult_languageComplicate) {
    if (regexResult_languageComplicate[1] === "true") {
      showLanguage = true;
    } else if (regexResult_languageComplicate[1] === "false") {
      showLanguage = false;
    } else {
      showLanguage = true;
      language = regexResult_languageComplicate[2] || regexResult_languageComplicate[3];
    }
  }
  let showCopyBtn = void 0;
  const regexResult_copyBtnSimple = REGEX.COPYBTN_SIMPLE.exec(firstline);
  const regexResult_copyBtnComplicate = REGEX.COPYBTN_COMPLICATE.exec(firstline);
  if (regexResult_copyBtnSimple) {
    showCopyBtn = true;
  } else if (regexResult_copyBtnComplicate) {
    if (regexResult_copyBtnComplicate[1] === "true") {
      showCopyBtn = true;
    } else if (regexResult_copyBtnComplicate[1] === "false") {
      showCopyBtn = false;
    }
  }
  let showPrompt = void 0;
  let prompt = settings.defaultPrompt;
  const regexResult_promptSimple = REGEX.PROMPT_SIMPLE.exec(firstline);
  const regexResult_promptComplicate = REGEX.PROMPT_COMPLICATE.exec(firstline);
  if (regexResult_promptSimple) {
    showPrompt = true;
  } else if (regexResult_promptComplicate) {
    if (regexResult_promptComplicate[1] === "true") {
      showPrompt = true;
    } else if (regexResult_promptComplicate[1] === "false") {
      showPrompt = false;
    } else {
      showPrompt = true;
      prompt = regexResult_promptComplicate[2] || regexResult_promptComplicate[3];
    }
  }
  let isResult = false;
  let resultPrompt = settings.defaultResultPrompt;
  const regexResult_result = REGEX.RESULT.exec(firstline);
  const regexResultPrompt_result = REGEX.PROMPT_COMPLICATE.exec(firstline);
  if (regexResult_result) {
    isResult = true;
    showTitle = false;
    showLanguage = false;
    showCopyBtn = false;
    showPrompt = false;
    if (regexResultPrompt_result) {
      resultPrompt = regexResultPrompt_result[2] || regexResultPrompt_result[3];
    }
  }
  return {
    showTitle,
    title,
    showLinenos,
    linenosStart,
    linenosNum,
    showHighlight,
    highlightLines,
    showLanguage,
    language,
    showCopyBtn,
    isResult,
    resultPrompt,
    showPrompt,
    prompt
  };
}
async function HKCodeBlockProcessor(el, context, plugin) {
  const settings = plugin.settings;
  const view = app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
  if (!view)
    return;
  const elem_code = el.querySelector("pre:not(.frontmatter) > code");
  if (!elem_code)
    return;
  const elem_pre = elem_code.parentElement;
  if (!elem_pre)
    return;
  const elem_div = elem_pre.parentElement;
  if (!elem_div)
    return;
  const elem_copyBtn = elem_div.querySelector(".copy-code-button");
  if (!elem_copyBtn)
    return;
  const section_code = context.getSectionInfo(elem_code);
  if (!section_code)
    return;
  const {
    showTitle,
    title,
    showLinenos,
    linenosStart,
    linenosNum,
    showHighlight,
    highlightLines,
    showLanguage,
    language,
    showCopyBtn,
    isResult,
    resultPrompt,
    showPrompt,
    prompt
  } = getMeta(view, elem_code, section_code, settings);
  if (settings.debugMode) {
    console.log({
      showTitle,
      title,
      showLinenos,
      linenosStart,
      linenosNum,
      showHighlight,
      highlightLines,
      showLanguage,
      language,
      showCopyBtn,
      isResult,
      resultPrompt,
      showPrompt,
      prompt
    });
  }
  elem_div.classList.add("hk-codeblock");
  elem_code.classList.add("hk-codeblock-code");
  elem_copyBtn.remove();
  if (settings.useTitleGlobal === "default off, but on when specified" && showTitle === true) {
    elem_div.classList.add("hk-codeblock-show-title");
    const elem_title = document.createElement("div");
    elem_title.classList.add("hk-codeblock-title");
    elem_title.innerHTML = title;
    elem_div.insertBefore(elem_title, elem_pre);
  }
  if (settings.useLinenosGlobal === "always on" || settings.useLinenosGlobal === "default on, but off when specified" && (showLinenos === void 0 || showLinenos === true) || settings.useLinenosGlobal === "default off, but on when specified" && showLinenos === true) {
    elem_div.classList.add("hk-codeblock-show-linenos");
    const elem_linenos = document.createElement("code");
    elem_linenos.classList.add("hk-codeblock-linenos");
    elem_linenos.innerText = Array(linenosNum).fill(0).map((_, idx) => idx + linenosStart).join("\n");
    elem_pre.insertBefore(elem_linenos, elem_code);
    if (settings.showLinenosSplitter) {
      elem_linenos.classList.add("show-splitter");
    }
  }
  if (settings.useHighlightGlobal === "default off, but on when specified" && showHighlight === true) {
    elem_div.classList.add("hk-codeblock-show-highlight");
    elem_div.style.setProperty("--hk-codeblock-highlight-background-color", settings.highlightColor);
    const elem_highlight = document.createElement("code");
    elem_highlight.classList.add("hk-codeblock-highlight");
    elem_highlight.innerHTML = Array(linenosNum).fill(0).map((_, idx) => {
      const classNames = [];
      if (highlightLines.includes(idx + linenosStart))
        classNames.push("highlight");
      return `<span class="line line-${idx + linenosStart} ${classNames.join(" ")}"> </span>`;
    }).join("\n");
    elem_pre.insertBefore(elem_highlight, elem_code);
  }
  if (settings.useLanguageGlobal === "always on" || settings.useLanguageGlobal === "default on, but off when specified" && (showLanguage === void 0 || showLanguage === true) || settings.useLanguageGlobal === "default off, but on when specified" && showLanguage === true) {
    elem_div.classList.add("hk-codeblock-show-language");
    const elem_language = document.createElement("div");
    elem_language.classList.add("hk-codeblock-language");
    elem_language.innerText = language;
    elem_pre.prepend(elem_language);
  }
  if (settings.useCopyBtnGlobal === "always on" || settings.useCopyBtnGlobal === "default on, but off when specified" && (showCopyBtn === void 0 || showCopyBtn === true) || settings.useCopyBtnGlobal === "default off, but on when specified" && showCopyBtn === true) {
    elem_div.classList.add("hk-codeblock-show-copybtn");
    elem_pre.appendChild(elem_copyBtn);
  }
  if (settings.usePromptGlobal === "always on" && settings.promptingLanguages.includes(language) || settings.usePromptGlobal === "default on, but off when specified" && settings.promptingLanguages.includes(language) && (showPrompt === void 0 || showPrompt === true) || settings.usePromptGlobal === "default off, but on when specified" && showPrompt === true) {
    elem_div.classList.add("hk-codeblock-show-prompt");
    let code_lines = elem_code.innerText.split("\n");
    if (code_lines[code_lines.length - 1].trim().length == 0)
      code_lines.pop();
    const no_prompt_line_idxs = code_lines.map((line, idx) => {
      if (line.trim().length == 0)
        return idx + 1;
      if (line.startsWith("#"))
        return idx + 1;
      return -1;
    }).filter((idx) => idx != -1);
    elem_pre.classList.add("command-line");
    elem_pre.setAttribute("data-prompt", prompt);
    elem_pre.setAttribute("data-continuation-str", "\\");
    elem_pre.setAttribute("data-continuation-prompt", " ".repeat(prompt.length));
    elem_pre.setAttribute("data-output", no_prompt_line_idxs.join(", "));
  }
  if (settings.useResultGlobal === "enable" && isResult === true) {
    elem_div.classList.add("hk-codeblock-result");
    elem_code.classList.add("hk-codeblock-result-code");
    elem_div.setAttribute("data-result-prompt", resultPrompt);
  }
}

// src/prism-plugins/prism-command-line.js
function PrismPlugin_CommandLine(Prism) {
  if (typeof Prism === "undefined" || typeof document === "undefined") {
    return;
  }
  var CLASS_PATTERN = /(?:^|\s)command-line(?:\s|$)/;
  var PROMPT_CLASS = "command-line-prompt";
  var startsWith = "".startsWith ? function(s, p) {
    return s.startsWith(p);
  } : function(s, p) {
    return s.indexOf(p) === 0;
  };
  var endsWith = "".endsWith ? function(str, suffix) {
    return str.endsWith(suffix);
  } : function(str, suffix) {
    var len = str.length;
    return str.substring(len - suffix.length, len) === suffix;
  };
  function hasCommandLineInfo(env) {
    var vars = env.vars = env.vars || {};
    return "command-line" in vars;
  }
  function getCommandLineInfo(env) {
    var vars = env.vars = env.vars || {};
    return vars["command-line"] = vars["command-line"] || {};
  }
  Prism.hooks.add("before-highlight", function(env) {
    var commandLine = getCommandLineInfo(env);
    if (commandLine.complete || !env.code) {
      commandLine.complete = true;
      return;
    }
    var pre = env.element.parentElement;
    if (!pre || !/pre/i.test(pre.nodeName) || // Abort only if neither the <pre> nor the <code> have the class
    !CLASS_PATTERN.test(pre.className) && !CLASS_PATTERN.test(env.element.className)) {
      commandLine.complete = true;
      return;
    }
    var existingPrompt = env.element.querySelector("." + PROMPT_CLASS);
    if (existingPrompt) {
      existingPrompt.remove();
    }
    var codeLines = env.code.split("\n");
    if (codeLines[codeLines.length - 1].trim().length === 0) {
      commandLine.numberOfLines = codeLines.length - 1;
    } else {
      commandLine.numberOfLines = codeLines.length;
    }
    var outputLines = commandLine.outputLines = [];
    var outputSections = pre.getAttribute("data-output");
    var outputFilter = pre.getAttribute("data-filter-output");
    if (outputSections !== null) {
      outputSections.split(",").forEach(function(section) {
        var range = section.split("-");
        var outputStart = parseInt(range[0], 10);
        var outputEnd = range.length === 2 ? parseInt(range[1], 10) : outputStart;
        if (!isNaN(outputStart) && !isNaN(outputEnd)) {
          if (outputStart < 1) {
            outputStart = 1;
          }
          if (outputEnd > codeLines.length) {
            outputEnd = codeLines.length;
          }
          outputStart--;
          outputEnd--;
          for (var j2 = outputStart; j2 <= outputEnd; j2++) {
            outputLines[j2] = codeLines[j2];
            codeLines[j2] = "";
          }
        }
      });
    } else if (outputFilter) {
      for (var i = 0; i < codeLines.length; i++) {
        if (startsWith(codeLines[i], outputFilter)) {
          outputLines[i] = codeLines[i].slice(outputFilter.length);
          codeLines[i] = "";
        }
      }
    }
    var continuationLineIndicies = commandLine.continuationLineIndicies = /* @__PURE__ */ new Set();
    var lineContinuationStr = pre.getAttribute("data-continuation-str");
    var continuationFilter = pre.getAttribute("data-filter-continuation");
    for (var j = 0; j < codeLines.length; j++) {
      var line = codeLines[j];
      if (!line) {
        continue;
      }
      if (lineContinuationStr && endsWith(line, lineContinuationStr)) {
        continuationLineIndicies.add(j + 1);
      }
      if (j > 0 && continuationFilter && startsWith(line, continuationFilter)) {
        codeLines[j] = line.slice(continuationFilter.length);
        continuationLineIndicies.add(j);
      }
    }
    env.code = codeLines.join("\n");
  });
  Prism.hooks.add("before-insert", function(env) {
    var commandLine = getCommandLineInfo(env);
    if (commandLine.complete) {
      return;
    }
    var codeLines = env.highlightedCode.split("\n");
    var outputLines = commandLine.outputLines || [];
    for (var i = 0, l = codeLines.length; i < l; i++) {
      if (outputLines.hasOwnProperty(i)) {
        codeLines[i] = '<span class="token output">' + Prism.util.encode(outputLines[i]) + "</span>";
      } else {
        codeLines[i] = '<span class="token command">' + codeLines[i] + "</span>";
      }
    }
    env.highlightedCode = codeLines.join("\n");
  });
  Prism.hooks.add("complete", function(env) {
    if (!hasCommandLineInfo(env)) {
      return;
    }
    var commandLine = getCommandLineInfo(env);
    if (commandLine.complete) {
      return;
    }
    var pre = env.element.parentElement;
    if (CLASS_PATTERN.test(env.element.className)) {
      env.element.className = env.element.className.replace(CLASS_PATTERN, " ");
    }
    if (!CLASS_PATTERN.test(pre.className)) {
      pre.className += " command-line";
    }
    function getAttribute(key, defaultValue) {
      return (pre.getAttribute(key) || defaultValue).replace(/"/g, "&quot");
    }
    var promptLines = "";
    var rowCount = commandLine.numberOfLines || 0;
    var promptText = getAttribute("data-prompt", "");
    var promptLine;
    if (promptText !== "") {
      promptLine = '<span data-prompt="' + promptText + '"></span>';
    } else {
      var user = getAttribute("data-user", "user");
      var host = getAttribute("data-host", "localhost");
      promptLine = '<span data-user="' + user + '" data-host="' + host + '"></span>';
    }
    var continuationLineIndicies = commandLine.continuationLineIndicies || /* @__PURE__ */ new Set();
    var continuationPromptText = getAttribute("data-continuation-prompt", ">");
    var continuationPromptLine = '<span data-continuation-prompt="' + continuationPromptText + '"></span>';
    for (var j = 0; j < rowCount; j++) {
      if (continuationLineIndicies.has(j)) {
        promptLines += continuationPromptLine;
      } else {
        promptLines += promptLine;
      }
    }
    var prompt = document.createElement("span");
    prompt.className = PROMPT_CLASS;
    prompt.innerHTML = promptLines;
    var outputLines = commandLine.outputLines || [];
    for (var i = 0, l = outputLines.length; i < l; i++) {
      if (outputLines.hasOwnProperty(i)) {
        var node = prompt.children[i];
        node.removeAttribute("data-user");
        node.removeAttribute("data-host");
        node.removeAttribute("data-prompt");
      }
    }
    env.element.insertBefore(prompt, env.element.firstChild);
    commandLine.complete = true;
  });
}

// src/main.ts
var HKCodeBlockPlugin = class extends import_obsidian3.Plugin {
  async onload() {
    await this.loadSettings();
    if (this.settings.debugMode) {
      console.log("loading HKCodeBlock plugin");
    }
    const Prism = await (0, import_obsidian3.loadPrism)();
    PrismPlugin_CommandLine(Prism);
    this.addSettingTab(new HKCodeBlockSettingTab(this.app, this));
    const processor = this.registerMarkdownPostProcessor((el, ctx) => {
      HKCodeBlockProcessor(el, ctx, this);
    });
    processor.sortOrder = 100;
  }
  onunload() {
    if (this.settings.debugMode) {
      console.log("unloading HKCodeBlock plugin");
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,
